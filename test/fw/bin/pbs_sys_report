#!/usr/bin/env python3
# coding: utf-8

# Copyright (C) 1994-2021 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of both the OpenPBS software ("OpenPBS")
# and the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# OpenPBS is free software. You can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# OpenPBS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# PBS Pro is commercially licensed software that shares a common core with
# the OpenPBS software.  For a copy of the commercial license terms and
# conditions, go to: (http://www.pbspro.com/agreement.html) or contact the
# Altair Legal Department.
#
# Altair's dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of OpenPBS and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair's trademarks, including but not limited to "PBS™",
# "OpenPBS®", "PBS Professional®", and "PBS Pro™" and Altair's logos is
# subject to Altair's trademark licensing policies.

import csv
import json
import sys
import os
import argparse


def write_to_csv(head, csvrows, i, filepath):
    with open(filepath, 'a+') as fp:
        if i == 0:
            csv.writer(fp).writerow(head)
        csv.writer(fp).writerow(csvrows)


if __name__ == '__main__':

    msg = 'System monitoring results to csv conversion tool'
    parser = argparse.ArgumentParser(description=msg)
    parser.add_argument('PTL_JSON_FILE', help='path to ptl_test_results.json')
    parser.add_argument(
        '--outputfile', default='sys_report.csv', help='path to generate file')
    args = parser.parse_args()
    filepath = args.outputfile

    if os.path.exists(filepath):
        os.remove(filepath)

    with open(args.PTL_JSON_FILE) as fp:
        td = json.load(fp)

    for k, v in sorted(td['testsuites'].items()):
        _otcs = v['testcases']
        for _k, _v in sorted(v['testcases'].items()):
            _tcn = k + '.' + _k
            _om = _v['results']
            for key, val in _om.items():
                for item in val['measurements']:
                    for ky, vl in item.items():
                        if ky == 'procs':
                            timelist = []
                            name = ''
                            time = ''
                            for mes in vl:
                                timelist.append(mes['time'])
                                timelist = list(set(timelist))
                            timelist.sort()
                            i = 0
                            for tm in timelist:
                                head = ['Time']
                                csvrows = []
                                csvrows.append(tm)
                                for mes in vl:
                                    name = mes['name']
                                    if mes['time'] == tm:
                                        for nm, value in sorted(mes.items()):
                                            if nm != 'name' and nm != 'time':
                                                head.append(nm + '_' + name)
                                                csvrows.append(value)
                                write_to_csv(head, csvrows, i, filepath)
                                i += 1
